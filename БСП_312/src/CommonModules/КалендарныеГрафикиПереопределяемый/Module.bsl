///////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2019, ООО 1С-Софт
// Все права защищены. Эта программа и сопроводительные материалы предоставляются 
// в соответствии с условиями лицензии Attribution 4.0 International (CC BY 4.0)
// Текст лицензии доступен по ссылке:
// https://creativecommons.org/licenses/by/4.0/legalcode
///////////////////////////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Вызывается при изменении данных производственных календарей.
// В случае, если разделение включено, выполняется в не разделенном режиме.
//
// Параметры:
//	УсловияОбновления - ТаблицаЗначений - таблица с колонками:
//		* КодПроизводственногоКалендаря - Строка - код производственного календаря, данные которого изменились;
//		* Год                           - Число  - календарный год, за который изменились данные.
//
Процедура ПриОбновленииПроизводственныхКалендарей(УсловияОбновления) Экспорт
	ОбновитьДанныеПроизводственныхКалендарейПомесячно(УсловияОбновления);
КонецПроцедуры

// Вызывается при изменении данных, зависимых от производственных календарей.
// В случае, если разделение включено, выполняется в областях данных.
//
// Параметры:
//	УсловияОбновления - ТаблицаЗначений - таблица с колонками:
//		* КодПроизводственногоКалендаря - Строка - код производственного календаря, данные которого изменились;
//		* Год                           - Число  - календарный год, за который изменились данные.
//
Процедура ПриОбновленииДанныхЗависимыхОтПроизводственныхКалендарей(УсловияОбновления) Экспорт
	
КонецПроцедуры

// Вызывается при регистрации отложенного обработчика обновления данных, зависимых от производственных календарей.
// В БлокируемыеОбъекты следует добавить имена метаданных объектов, 
// которые следует заблокировать от использования на период обновления производственных календарей.
//
// Параметры:
//	БлокируемыеОбъекты - Массив - имена метаданных блокируемых объектов.
//
Процедура ПриЗаполненииБлокируемыхОбъектовЗависимыхОтПроизводственныхКалендарей(БлокируемыеОбъекты) Экспорт
	
КонецПроцедуры

// Вызывается при регистрации отложенного обработчика обновления данных, зависимых от производственных календарей.
// В ИзменяемыеОбъекты следует добавить имена метаданных объектов, 
// которые будут изменяться при обновлении производственных календарей.
//
// Параметры:
//	ИзменяемыеОбъекты - Массив - имена метаданных изменяемых объектов.
//
Процедура ПриЗаполненииИзменяемыхОбъектовЗависимыхОтПроизводственныхКалендарей(ИзменяемыеОбъекты) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ОбновитьДанныеПроизводственныхКалендарейПомесячно(УсловияОбновления, РежимЗагрузки = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УсловияОбновления", УсловияОбновления);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Условия.КодПроизводственногоКалендаря,
		|	Условия.Год
		|ПОМЕСТИТЬ ВТУсловияОбновления
		|ИЗ
		|	&УсловияОбновления КАК Условия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
		|	ДанныеПроизводственногоКалендаря.Год КАК Год,
		|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ) КАК Месяц,
		|	СУММА(1) КАК КалендарныхДней,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РабочихДней,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|				ТОГДА 40 / 5
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
		|				ТОГДА 40 / 5 - 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РабочихЧасовДлительностьНедели40Часов,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|				ТОГДА 36 / 5
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
		|				ТОГДА 36 / 5 - 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РабочихЧасовДлительностьНедели36Часов,
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий)
		|				ТОГДА 24 / 5
		|			КОГДА ДанныеПроизводственногоКалендаря.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
		|				ТОГДА 24 / 5 - 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК РабочихЧасовДлительностьНедели24Часа
		|ИЗ
		|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТУсловияОбновления КАК УсловияОбновления
		|		ПО (УсловияОбновления.КодПроизводственногоКалендаря = ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь.Код)
		|			И (УсловияОбновления.Год = ДанныеПроизводственногоКалендаря.Год)
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь,
		|	ДанныеПроизводственногоКалендаря.Год,
		|	НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПроизводственныйКалендарь,
		|	Год";
	РезультатЗапроса = Запрос.Выполнить();
	
	НаборЗаписей = РегистрыСведений.ДанныеПроизводственногоКалендаряПомесячно.СоздатьНаборЗаписей();
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.СледующийПоЗначениюПоля("ПроизводственныйКалендарь") Цикл
		Пока Выборка.СледующийПоЗначениюПоля("Год") Цикл
			НаборЗаписей.Очистить();
			Пока Выборка.Следующий() Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
			КонецЦикла;
			НаборЗаписей.Отбор.ПроизводственныйКалендарь.Установить(Выборка.ПроизводственныйКалендарь);
			НаборЗаписей.Отбор.Год.Установить(Выборка.Год);
			НаборЗаписей.ОбменДанными.Загрузка = РежимЗагрузки;
			НаборЗаписей.Записать();
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти